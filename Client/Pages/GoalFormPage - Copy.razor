@page "/goal-form/{id}"
@using DissertationArtefact.Shared
@inject HttpClient Http
@inject NavigationManager NavManager

<h1>Goal Form</h1>

@if (goal == null)
{
    <p><em>Loading goal</em></p>
}
else
{
    <div>
        <label for="">Goal Name: </label>
        <input @bind="@goal.GoalName" />
    </div>

    <div>
        <label for="">Start Amount: </label>
        <input @bind="@goal.StartAmount" />
    </div>

    <div>
        <label for="">Target Amount: </label>
        <input @bind="@goal.TargetAmount" />
    </div>

    <div>
        <label for="">Category:</label>
        <select @bind="goal.GoalCategory">
            @foreach (GoalCategories category in (GoalCategories[])Enum.GetValues(typeof(GoalCategories)))
            {
                <option value="@category">@category</option>
            }
        </select>
    </div>


    <!--Bootstrap button, look into syncfusion-->
    <button class="btn btn-danger" @onclick="@(async () => await Cancel())">Cancel</button>
    <button class="btn btn-success" @onclick="@(async () => await Save())">Save</button>
}


@code {

    [Parameter]
    public string id { get; set; }

    private Goal goal;
    private User user;

    protected override async Task OnInitializedAsync()
    {
        string abc = "6091a3f06dbeb16f2aa3abd4";
        user = await Http.GetFromJsonAsync<User>($"api/users/{abc}");

        if (id == new Guid().ToString()) //(string.IsNullOrEmpty(id)) ...not sure what this is for.. might be tired eyes
        {
            goal = new Goal
            {
                CreationDate = DateTime.Now,
                UserId = user.Id
            };
        }
        else
        {
            goal = await Http.GetFromJsonAsync<Goal>($"api/goal/{id}");

            if (goal is null)
            {
                //expense = new Expense();
            }
        }
    }

    protected async Task Save()
    {
        goal.UserId = user.Id;
        var result = await Http.PostAsJsonAsync("api/goal", goal, null);

        NavManager.NavigateTo("goals");
    }

    protected async Task Cancel()
    {
        NavManager.NavigateTo("goals");
    }
}