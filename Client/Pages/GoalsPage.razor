@page "/goals"
@using DissertationArtefact.Shared
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Charts
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Security.Claims;
@using Pluto = DissertationArtefact.Shared
@inject HttpClient Http
@inject NavigationManager NavManager
@attribute [Authorize]
@*<PlutoButton buttonLabel="Hi there :)" goal="@goal"></PlutoButton>*@

@if (goals == null)
{
    <p><em>...</em></p>
}
else
{
    @if (!(expenses is null && incomes is null))
    {
        if (expenses.Count() == 0 || incomes.Count() == 0)
        {
            <div>
                You haven't created any income or expenses yet
            </div>
        }
    }
    else
    {
        <h1>
            Goals
            <button class="btn btn-primary" @onclick="@(() => NavManager.NavigateTo($"/goal"))">
                <span class="oi oi-plus" aria-hidden="true"></span>
            </button>
        </h1>

        foreach (var goal in goals)
        {
            @*<PlutoButton buttonLabel="@goal.GoalName"></PlutoButton>*@
            <NavLink class="nav-link" href="@($"goal/{goal.Id}")">
                <button class="btn btn-primary">
                    <div>@goal.GoalName</div>
                    <div>£@goal.TargetAmount</div>
                    <div>Allocation: <b>@goal.Allocation%</b></div>
                </button>
            </NavLink>
            <div>
                <span aria-hidden="true"></span>
                @*<button class="btn btn-info btn-lg">*@

                <div>
                    <input style="width:50%; height:50px;" class="form-range" type="range" min="0" max="100" step="1" @bind="@goal.Allocation" />
                </div>

            </div>
        }

        <button class="btn btn-primary" @onclick="@(async () => await Update())">Update</button>

        <div class="col-lg-8 control-section sb-property-border">
            <div class="control-section">
                <SfAccumulationChart Title="Goal Allocation Percentage" EnableAnimation="true">
                    <AccumulationChartTooltipSettings Enable="true"></AccumulationChartTooltipSettings>
                    <AccumulationChartLegendSettings Visible="false"></AccumulationChartLegendSettings>
                    <AccumulationChartSeriesCollection>
                        <AccumulationChartSeries DataSource="@PieChartPoints" XName="Browser" YName="Users" Name="Browser" Radius="@OuterRadius" StartAngle="@StartAngle" EndAngle="@EndAngle"
                                                 InnerRadius="0%" ExplodeIndex="@ExplodeIndex" Explode="true" ExplodeOffset="@ExplodeRadius">
                            <AccumulationDataLabelSettings Visible="true" Name="Browser" Position="AccumulationLabelPosition.Outside"></AccumulationDataLabelSettings>
                        </AccumulationChartSeries>
                    </AccumulationChartSeriesCollection>
                </SfAccumulationChart>
            </div>
        </div>
    }
}


@code {

    [Parameter]
    public string id { get; set; }

    private List<Goal> goals;
    private List<Income> incomes;
    private List<Expense> expenses;
    private Goal goal;
    private PlutoFunctions plutoFunctions;

    private ClaimsPrincipal user;
    private Pluto.User mongoDbUser;

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;
        user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            string userId = AppUser.GetClaimValue("sub", user.Claims);        //user.Claims//user.FindFirst(ClaimTypes.NameIdentifier)//user.Claims.First(c=>c.Type=="Subject").Value;
            mongoDbUser = await GetMongoDbUser(userId, user);
        }

        goals = await Http.GetFromJsonAsync<List<Goal>>($"api/goal/user/{mongoDbUser.Id}");
        await Update();
    }

    public double ExplodeIndex { get; set; } = 1;
    public string OuterRadius = "70%", ExplodeRadius = "10%";
    public int StartAngle = 0, EndAngle = 360;

    private List<PieData> PieChartPoints;

    private int angle = 0, radius = 70, exploderadius = 10;

    private void changeAngle(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        StartAngle = EndAngle = angle = Convert.ToInt32(args.Value);
    }
    private void ChangeOuterRadius(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        radius = Convert.ToInt32(args.Value);
        OuterRadius = radius + "%";
    }
    private void ChangeExplodeRadius(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        exploderadius = Convert.ToInt32(args.Value);
        ExplodeRadius = exploderadius + "%";
    }
    private void ChangeExplodeIndex(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        ExplodeIndex = Convert.ToInt32(args.Value);
    }
    public class PieData
    {
        public string Browser { get; set; }
        public double Users { get; set; }
    }

    private async Task Update()
    {
        PieChartPoints = new List<PieData>();

        foreach (var goal in goals)
        {
            PieChartPoints.Add(new PieData { Browser = goal.GoalName, Users = Convert.ToDouble(goal.Allocation) });
        }
    }

    // Auth overhead
    private async Task<Pluto.User> GetMongoDbUser(string SubjectId, ClaimsPrincipal user)
    {
        Pluto.User mongoDbUser = null;
        try
        {
            mongoDbUser = await Http.GetFromJsonAsync<Pluto.User>($"api/users/guid/{SubjectId}");
        }
        catch
        {
        }

        if (mongoDbUser is null)
        {
            mongoDbUser = new Pluto.User { SubjectId = SubjectId, CreatedOn = DateTime.Now, Email = "", Name = user.Identity.Name };
            await Save(mongoDbUser);
            return await GetMongoDbUser(SubjectId, user);
        }
        return mongoDbUser;
    }

    private async Task Save(Pluto.User user)
    {
        await Http.PostAsJsonAsync("api/users", user);
    }
}