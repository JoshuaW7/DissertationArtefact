@page "/goalorig/"
@page "/goalorig/{id}"
@inject HttpClient Http
@inject NavigationManager NavManager
@using Microsoft.JSInterop;
@using DissertationArtefact.Shared;
@using Syncfusion.Blazor.Charts;
@inject IJSRuntime JS


<h1>Goal</h1>

@if (!(goal is null))
{
    <form class="row row-cols-lg-auto g-3 align-items-center">
        <div class="col-md-3">
            <label class="visually-hidden" for="inlineFormSelectPref">Goal Name: </label>
            <input type="text" class="form-control" @bind="@goal.GoalName" />
        </div>
        <div class="col-md-2">
            <label class="visually-hidden" for="inlineFormSelectPref">Target Amount:</label>
            <input type="text" class="form-control" @bind="@goal.TargetAmount" />
        </div>
        <div class="col-md-2">
            <label class="visually-hidden" for="inlineFormSelectPref">Start Amount:</label>
            <input type="text" class="form-control" @bind="@goal.StartAmount" />
        </div>
        <div class="col-md-2">
            <label class="visually-hidden" for="inlineFormSelectPref">Category:</label>
            <select class="form-control" id="inlineFormSelectPref" @bind="goal.GoalCategory">
                @foreach (GoalCategories category in (GoalCategories[])Enum.GetValues(typeof(GoalCategories)))
                {
                    <option value="@category">@category</option>
                }
            </select>
        </div>
        <div class="col-md-1">
            <button class="btn btn-success btn-lg" @onclick="@(async () => await Save())">Save</button>
        </div>
    </form>
}


<style>
    #control-container {
        padding: 0px !important;
    }

    #container_Series_1,
    #container_Series_0 {
        stroke-dasharray: 10px 10px;
        stroke-linejoin: round;
        stroke-linecap: round;
        -webkit-animation: dash 1s linear infinite;
        animation: dash 1s linear infinite;
    }

    #container_Series_0_Point_3_Symbol {
        -webkit-animation: opac 1s ease-out infinite;
        animation: opac 1s ease-out infinite;
    }

    @@-webkit-keyframes dash {
        100% {
            stroke-dashoffset: -20px;
        }
    }

    @@keyframes dash {
        100% {
            stroke-dashoffset: -20px;
        }
    }

    @@keyframes opac {
        0% {
            stroke-opacity: 1;
            stroke-width: 0px;
        }

        100% {
            stroke-opacity: 0;
            stroke-width: 10px;
        }
    }
</style>
<div class="control-section">
    <SfChart ID="container" Title="Fruits Production Statistics">
        <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" LabelFormat="yyyy" IntervalType="IntervalType.Years" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis LabelFormat="{value}%" RangePadding="ChartRangePadding.None" Minimum="0" Maximum="40" Interval="10">
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
        </ChartPrimaryYAxis>
        <ChartTooltipSettings Enable="true" Shared="true"></ChartTooltipSettings>
        <ChartCrosshairSettings Enable="true" LineType="LineType.Vertical">
        </ChartCrosshairSettings>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@ChartData" Name="Banana" XName="Period" Width="2"
                         Opacity="1" YName="Banana_ProductionRate" Type="ChartSeriesType.Line" DashArray="5">
                <ChartMarker Visible="true" Width="10" Height="10">
                </ChartMarker>
            </ChartSeries>
            <ChartSeries DataSource="@ChartData" Name="Apple" XName="Period" Width="2"
                         Opacity="1" YName="Apple_ProductionRate" Type="ChartSeriesType.Line" DashArray="10">
                <ChartMarker Visible="true" Width="10" Height="10" Shape="ChartShape.Diamond">
                </ChartMarker>
            </ChartSeries>
        </ChartSeriesCollection>
    </SfChart>
</div>





@*<SfChart Title="">
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>

        <ChartSeriesCollection>
            <ChartSeries DataSource="@GoalCurrent" Opacity="0.6" Name="Current" XName="Interval" YName="Amount" Type="ChartSeriesType.SplineArea" Fill="Red">
            </ChartSeries>
            <ChartSeries DataSource="@GoalPotential" Opacity="0.6" Name="Potential" XName="Interval" YName="Amount" Type="ChartSeriesType.SplineArea" Fill="Blue">
            </ChartSeries>
            <ChartSeries DataSource="@GoalAmount" Name="Goal" XName="Interval" Width="2"
                         Opacity="0.7" YName="Amount" Type="ChartSeriesType.Line" Fill="Black">
            </ChartSeries>
        </ChartSeriesCollection>
    </SfChart>*@


<SfChart Title="">
    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
    <ChartSeriesCollection>
        <ChartSeries DataSource="@goalTarget" Opacity="1" Name="Target Amount" XName="MonthYear" YName="Amount" Type="ChartSeriesType.Line" Fill="Black" Width="2"></ChartSeries>
        <ChartSeries DataSource="@goalCurrentAccrual" Opacity="0.7" Name="Discretionary Expenses" XName="MonthYear" YName="Amount" Type="ChartSeriesType.SplineArea" Fill="Blue"></ChartSeries>
        <ChartSeries DataSource="@goalPotentialAccrual" Opacity="0.7" Name="Essential Expenses" XName="MonthYear" YName="Amount" Type="ChartSeriesType.SplineArea" Fill="Green"></ChartSeries>
    </ChartSeriesCollection>
</SfChart>



<input class="form-range" type="range" min="1" max="100" step="1" value="@discReduction"
       @oninput="@((args) => discReduction = Convert.ToInt32(args.Value))" @onchange="AllocationChanged" />



<div>Months: <b>@months</b></div>

@if (!(intervals is null))
{
    <input type="range" min="1" max="100" step="1" value="@goal.Allocation"
           @oninput="@((args) => goal.Allocation = Convert.ToDecimal(args.Value))" @onchange="AllocationChanged" />
    <div>Allocation: <b>@goal.Allocation%</b></div>

    <table class="table" style="">
        <thead>
            <tr>
                <th><b>Interval </b></th>
                <th><b>Save Target </b></th>
                <th><b>Saved  </b></th>
            </tr>
        </thead>

        <tbody>
            @foreach ((int, decimal, decimal) interval in intervals)
            {
                <tr>
                    <td>@DateTime.Now.AddMonths(@interval.Item1)</td>
                    <td>@interval.Item2</td>
                    <td>@interval.Item3</td>
                </tr>
            }
        </tbody>
    </table>
}


@code
{
    [Parameter]
    public string id { get; set; }

    private User user;
    private List<Goal> goals;
    private List<Income> incomes;
    private List<Expense> expenses;
    private Goal goal;
    private int months;
    private PlutoFunctions plutoFunctions;
    private List<(int, decimal, decimal)> intervals;

    private List<Contribution> goalPotential;
    private List<Contribution> goalCurrent;
    private List<Contribution> goalCurrentAccrual;
    private List<Contribution> goalPotentialAccrual;
    private List<Contribution> goalTarget;

    private List<(int, int, decimal, decimal, decimal)> incDispEssDisc;
    private List<(int, int, decimal, decimal, decimal)> incDispEss;

    private int discReduction = 0;

    //private Theme Theme { get; set; }

    protected override async Task OnInitializedAsync()
    {

        string abc = "6091a3f06dbeb16f2aa3abd4";
        user = await Http.GetFromJsonAsync<User>($"api/users/{abc}");

        incomes = await Http.GetFromJsonAsync<List<Income>>($"api/income/user/{user.Id}");
        expenses = await Http.GetFromJsonAsync<List<Expense>>($"api/expense/user/{user.Id}");


        if (string.IsNullOrEmpty(id))
        {
            goal = new Goal { GoalName = "New goal", StartAmount = 0, Allocation = 100, TargetAmount = 0, GoalCategory = GoalCategories.General, UserId = user.Id };
            //var response = await Http.PostAsJsonAsync<Goal>("api/goal", goal, null);
            //goals = await Http.GetFromJsonAsync<List<Goal>>($"api/goal/user/{user.Id}");
        }
        else
        {
            goal = await Http.GetFromJsonAsync<Goal>($"api/goal/{id}");
        }



        plutoFunctions = new PlutoFunctions();
        //months = plutoFunctions.MonthsToGoal(goal, incomes, expenses, goal.Allocation);

        //intervals = plutoFunctions.Intervals(goal, incomes, expenses, goal.Allocation);
        UpdateCollections();
    }


    private void UpdateCollections()
    {
        incDispEssDisc = plutoFunctions.IncomeExpenseProjection(60, incomes, expenses, new Types[] { Types.Essential, Types.Discretionary });
        incDispEss = plutoFunctions.IncomeExpenseProjection(60, incomes, expenses, new Types[] { Types.Essential });
        goalCurrent = plutoFunctions.goalContributions(goal.TargetAmount, incDispEssDisc, 100);
        goalPotential = plutoFunctions.goalContributions(goal.TargetAmount, incDispEss, 100);
        decimal accruedAmount = 0;
        goalCurrentAccrual = new List<Contribution>();
        goalPotentialAccrual = new List<Contribution>();
        goalTarget = new List<Contribution>();

        foreach (var contrib in goalCurrent)
        {
            accruedAmount += contrib.Amount;
            goalCurrentAccrual.Add(new Contribution { MonthYear = contrib.MonthYear, Amount = accruedAmount });
        }

        accruedAmount = 0;
        foreach (var contrib in goalPotential)
        {
            accruedAmount += contrib.Amount;
            goalPotentialAccrual.Add(new Contribution { MonthYear = contrib.MonthYear, Amount = accruedAmount });
        }

        foreach (var contrib in goalCurrent)
        {
            goalTarget.Add(new Contribution { MonthYear = contrib.MonthYear, Amount = goal.TargetAmount });
        }
    }

    private void UpdateCollections2()
    {
        incDispEssDisc = plutoFunctions.IncomeExpenseProjection(60, incomes, expenses, new Types[] { Types.Essential, Types.Discretionary });
        incDispEss = plutoFunctions.IncomeExpenseProjection(60, incomes, expenses, new Types[] { Types.Essential });

        goalCurrent = plutoFunctions.goalContributions(goal.TargetAmount, incDispEssDisc, 100);
        goalPotential = plutoFunctions.goalContributions(goal.TargetAmount, incDispEss, 100);

        decimal accruedAmount = 0;

        goalCurrentAccrual = new List<Contribution>();
        goalPotentialAccrual = new List<Contribution>();
        goalTarget = new List<Contribution>();

        foreach (var contrib in goalCurrent)
        {
            accruedAmount += contrib.Amount;
            goalCurrentAccrual.Add(new Contribution { MonthYear = contrib.MonthYear, Amount = accruedAmount });
        }

        accruedAmount = 0;
        foreach (var contrib in goalPotential)
        {
            accruedAmount += contrib.Amount;
            goalPotentialAccrual.Add(new Contribution { MonthYear = contrib.MonthYear, Amount = accruedAmount });
        }

        foreach (var contrib in goalCurrent)
        {
            goalTarget.Add(new Contribution { MonthYear = contrib.MonthYear, Amount = goal.TargetAmount });
        }
    }

    private void AllocationChanged()
    {


        UpdateCollections();
    }

    private void DiscReductionChanged()
    {
        UpdateCollections2();
    }


    ////redundant
    //public class ChartData
    //{
    //    public int X { get; set; }
    //    public decimal Y { get; set; }
    //    public decimal Z { get; set; }
    //    public decimal A { get; set; }
    //}
    public class IntervalAmount
    {
        public int Interval { get; set; }
        public decimal Amount { get; set; }
    }

    public class LineChartData
    {
        public DateTime Period { get; set; }
        public double Banana_ProductionRate { get; set; }
        public double Apple_ProductionRate { get; set; }
    }

    public List<LineChartData> ChartData = new List<LineChartData>
    {
        new LineChartData { Period = new DateTime(2005, 01, 01), Banana_ProductionRate = 12, Apple_ProductionRate = 9.5 },
        new LineChartData { Period = new DateTime(2006, 01, 01), Banana_ProductionRate = 10.6, Apple_ProductionRate = 19.9 },
        new LineChartData { Period = new DateTime(2007, 01, 01), Banana_ProductionRate = 15.6, Apple_ProductionRate = 25.2 },
        new LineChartData { Period = new DateTime(2008, 01, 01), Banana_ProductionRate = 38.6, Apple_ProductionRate = 36 },
        new LineChartData { Period = new DateTime(2009, 01, 01), Banana_ProductionRate = 27.4, Apple_ProductionRate = 16.6 },
        new LineChartData { Period = new DateTime(2010, 01, 01), Banana_ProductionRate = 23.5, Apple_ProductionRate = 14.2 },
        new LineChartData { Period = new DateTime(2011, 01, 01), Banana_ProductionRate = 16.6, Apple_ProductionRate = 10.3 }
    };


    protected async Task Save()
    {
        goal.UserId = user.Id;
        var result = await Http.PostAsJsonAsync("api/goal", goal, null);

        //NavManager.NavigateTo("goals");
    }

    protected async Task Cancel()
    {
        NavManager.NavigateTo("goals");
    }


    //New
    public List<IntervalAmount> goalCurrentNew = new List<IntervalAmount>
    {

    };
}