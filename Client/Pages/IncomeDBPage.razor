@page "/incomeDB"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Security.Claims;
@using DissertationArtefact.Shared
@using Pluto = DissertationArtefact.Shared
@inject HttpClient Http
@inject NavigationManager NavManager
@attribute [Authorize]

<h1>Income</h1>

@if (incomes == null)
{
    <p><i>Loading income...</i></p>
}
else
{

    <table class="table">
        <thead>
            <tr>
                <th>
                    @*Add new income button*@
                    <button class="btn btn-primary btn-sm" @onclick="@(() => NavManager.NavigateTo($"/income-form/{new Guid()}"))">
                        <span class="oi oi-plus" aria-hidden="true"></span>
                    </button>
                </th>
                <th>Name</th>
                <th>Payment Date</th>
                <th>Frequency</th>
                <th>Sender</th>
                <th style="text-align:right;">Amount</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var income in incomes)
            {
                <tr>
                    <td>
                        @*Edit income button*@
                        <button class="btn btn-primary btn-sm" @onclick="@(() => NavManager.NavigateTo($"/Income-form/{income.Id}"))">
                            <span class="oi oi-pencil" aria-hidden="true"></span>
                        </button>
                        @*<button class="btn btn-danger" @onclick="@((async () => await Delete(income)))">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-lg" viewBox="0 0 16 16">
                                <path d="M1.293 1.293a1 1 0 0 1 1.414 0L8 6.586l5.293-5.293a1 1 0 1 1 1.414 1.414L9.414 8l5.293 5.293a1 1 0 0 1-1.414 1.414L8 9.414l-5.293 5.293a1 1 0 0 1-1.414-1.414L6.586 8 1.293 2.707a1 1 0 0 1 0-1.414z" />
                            </svg>
                            </button>*@
                    </td>
                    <td>@income.LabelName</td>
                    <td>@income.PaymentDate</td>
                    <td>@income.Frequency</td>
                    <td>@income.SenderName</td>
                    <td style="text-align:right;">@income.Amount.ToString(@*currencyPref*@)</td>
                </tr>
            }

        </tbody>
        <tfoot>
            <tr>
                <td colspan="6" style="text-align:right;"> <b>Total: @incomes.Sum(i => i.Amount).ToString(@*currencyPref*@)</b></td>
            </tr>
        </tfoot>
    </table>

    <input type="range" min="12" max="520" step="1" value="@months"
           @oninput="@((args) => months = Convert.ToInt32(args.Value))" @onchange="ProjectionChanged" />
    <table class="table">
        <thead>
            <tr>
                <th>Year</th>
                <th>Month</th>
                <th>Total Monthly Income</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var i in projectedIncome)
            {
                <tr>
                    <td>@i.Key.Item1</td>
                    <td>@i.Key.Item2 </td>
                    <td>@i.Value</td>
                </tr>
            }

        </tbody>
    </table>
}

@code {

    private List<Income> incomes;
    //private string currencyPref = "£0.00";

    private Dictionary<(int, int), decimal> projectedIncome;
    private int months = 12;

    private ClaimsPrincipal user;
    private Pluto.User mongoDbUser;

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //mongoDbUser = await Http.GetFromJsonAsync<Pluto.User>($"api/users/6091a3f06dbeb16f2aa3abd4");

        var authState = await AuthState;
        user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            string userId = AppUser.GetClaimValue("sub", user.Claims);        //user.Claims//user.FindFirst(ClaimTypes.NameIdentifier)//user.Claims.First(c=>c.Type=="Subject").Value;
            mongoDbUser = await GetMongoDbUser(userId, user);
        }

        incomes = await Http.GetFromJsonAsync<List<Income>>($"api/income/user/{mongoDbUser.Id}");
        projectedIncome = new PlutoFunctions().IncomeProjection(months, incomes);
    }

    protected async Task Delete(Income income)
    {
        Console.WriteLine($"Deleting id:{income.Id}");
        var result = await Http.DeleteAsync($"api/income/{income.Id}");

        incomes.Remove(income);
    }

    protected async Task ProjectionChanged()
    {
        projectedIncome = new PlutoFunctions().IncomeProjection(months, incomes);
    }


    // Auth overhead
    private async Task<Pluto.User> GetMongoDbUser(string SubjectId, ClaimsPrincipal user)
    {
        Pluto.User mongoDbUser = null;
        try
        {
            mongoDbUser = await Http.GetFromJsonAsync<Pluto.User>($"api/users/guid/{SubjectId}");
        }
        catch
        {
        }

        if (mongoDbUser is null)
        {
            mongoDbUser = new Pluto.User { SubjectId = SubjectId, CreatedOn = DateTime.Now, Email = "", Name = user.Identity.Name };
            await Save(mongoDbUser);
            return await GetMongoDbUser(SubjectId, user);
        }
        return mongoDbUser;
    }

    private async Task Save(Pluto.User user)
    {
        await Http.PostAsJsonAsync("api/users", user);
    }
}
