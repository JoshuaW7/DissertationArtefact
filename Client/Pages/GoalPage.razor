@page "/goal/"
@page "/goal/{id}"
@inject HttpClient Http
@inject NavigationManager NavManager
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Security.Claims;
@using Microsoft.JSInterop;
@using DissertationArtefact.Shared;
@using Syncfusion.Blazor.Charts;
@using Pluto = DissertationArtefact.Shared
@inject IJSRuntime JS
@attribute [Authorize]




@if (!(goal is null))
{
    <h1>
        @goal.GoalName
        <button class="btn btn-danger" @onclick="@((async () => await Delete(goal)))">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">
                <path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0z" />
            </svg>
        </button>
    </h1>

    <div>
        <div class="col-md-3">
            <label class="visually-hidden" for="inlineFormSelectPref">Goal Name: </label>
            <input type="text" class="form-control" @bind="@goal.GoalName" />
        </div>
        <div class="col-md-2">
            <label class="visually-hidden" for="inlineFormSelectPref">Target Amount:</label>
            <input type="text" class="form-control" @bind="@goal.TargetAmount" />
        </div>
        <div class="col-md-2">
            <label class="visually-hidden" for="inlineFormSelectPref">Start Amount:</label>
            <input type="text" class="form-control" @bind="@goal.StartAmount" />
        </div>
        <div class="col-md-2">
            <label class="visually-hidden" for="inlineFormSelectPref">Category:</label>
            <select class="form-control" id="inlineFormSelectPref" @bind="goal.GoalCategory">
                @foreach (GoalCategories category in (GoalCategories[])Enum.GetValues(typeof(GoalCategories)))
                {
                    <option value="@category">@category</option>
                }
            </select>
        </div>
    </div>




    @*@oninput= "@((args) => goal.TargetAmount = Convert.ToInt32(String.IsNullOrEmpty((String)args.Value)? 0: Convert.ToInt32(args.Value)))" @onchange = "AllocationChanged"*@

    <form class="row row-cols-lg-auto g-3 align-items-center">
    </form>

    <div class="col-md-1">
        <button class="btn btn-success btn-sm" @onclick="@(async () => await Save2021())">Save</button>
    </div>
}


<style>
    #control-container {
        padding: 0px !important;
    }

    #container_Series_1,
    #container_Series_0 {
        stroke-dasharray: 10px 10px;
        stroke-linejoin: round;
        stroke-linecap: round;
        -webkit-animation: dash 1s linear infinite;
        animation: dash 1s linear infinite;
    }

    @goalCurrentAnimation {
        -webkit-animation: opac 1s ease-out infinite;
        animation: opac 1s ease-out infinite;
    }

    @goalPotentialAnimation {
        -webkit-animation: opac 1s ease-out infinite;
        animation: opac 1s ease-out infinite;
    }

    @@-webkit-keyframes dash {
        100% {
            stroke-dashoffset: -20px;
        }
    }

    @@keyframes dash {
        100% {
            stroke-dashoffset: -20px;
        }
    }

    @@keyframes opac {
        0% {
            stroke-opacity: 1;
            stroke-width: 0px;
        }

        100% {
            stroke-opacity: 0;
            stroke-width: 10px;
        }
    }
</style>
@*<div class="control-section">
        <SfChart ID="container" Title="Fruits Production Statistics">
            <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" LabelFormat="yyyy" IntervalType="IntervalType.Months" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
                <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
            </ChartPrimaryXAxis>
            <ChartPrimaryYAxis LabelFormat="{value}%" RangePadding="ChartRangePadding.None" Minimum="0" Maximum="40" Interval="10">
                <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            </ChartPrimaryYAxis>
            <ChartTooltipSettings Enable="true" Shared="true"></ChartTooltipSettings>
            <ChartCrosshairSettings Enable="true" LineType="LineType.Vertical">
            </ChartCrosshairSettings>
            <ChartSeriesCollection>
                <ChartSeries DataSource="@ChartData" Name="Banana" XName="Period" Width="2"
                             Opacity="1" YName="Banana_ProductionRate" Type="ChartSeriesType.Line" DashArray="5">
                    <ChartMarker Visible="true" Width="10" Height="10">
                    </ChartMarker>
                </ChartSeries>
                <ChartSeries DataSource="@ChartData" Name="Apple" XName="Period" Width="2"
                             Opacity="1" YName="Apple_ProductionRate" Type="ChartSeriesType.Line" DashArray="10">
                    <ChartMarker Visible="true" Width="10" Height="10" Shape="ChartShape.Diamond">
                    </ChartMarker>
                </ChartSeries>
            </ChartSeriesCollection>
        </SfChart>
    </div>*@

<div class="control-section">
    <SfChart ID="container" Title="Goal Savings Projection">
        <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" LabelFormat="MMM yyyy" IntervalType="IntervalType.Months" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis RangePadding="ChartRangePadding.None" Minimum="0" Maximum="@limitUpper">
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
        </ChartPrimaryYAxis>
        <ChartTooltipSettings Enable="true" Shared="true"></ChartTooltipSettings>
        <ChartCrosshairSettings Enable="true" LineType="LineType.Vertical">
        </ChartCrosshairSettings>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@goalCurrent" Name="Current" XName="MonthYear" Width="2"
                         Opacity="1" YName="Amount" Type="ChartSeriesType.Line" DashArray="5" Fill="Blue">
                <ChartMarker Visible="true" Width="10" Height="10" Shape="ChartShape.Diamond">
                </ChartMarker>
            </ChartSeries>
            <ChartSeries DataSource="@goalPotential" Name="Potential" XName="MonthYear" Width="2"
                         Opacity="1" YName="Amount" Type="ChartSeriesType.Line" DashArray="5" Fill="Red">
                <ChartMarker Visible="true" Width="10" Height="10" Shape="ChartShape.Diamond">
                </ChartMarker>
            </ChartSeries>
            <ChartSeries DataSource="@goalTarget" Name="Goal" XName="MonthYear" Width="2"
                         Opacity="0.7" YName="Amount" Type="ChartSeriesType.Line" DashArray="5" Fill="Black">
            </ChartSeries>
        </ChartSeriesCollection>
    </SfChart>
</div>

<div>Expense Reduction: <b>@discReduction%</b></div>
<input style="width:50%; height:50px;" class="form-range" type="range" min="0" max="100" step="1" value="@discReduction"
       @oninput="@((args) => discReduction = Convert.ToInt32(args.Value))" @onchange="AllocationChanged" />

<div><b>@months</b> Month Projection</div>

@if (!(goalCurrent is null))
{
    <table class="table" style="">
        <thead>
            <tr>
                <th><b>Month Year </b></th>
                <th><b>Amount</b></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var c in goalPotential)
            {
                <tr>
                    <td>@c.MonthYear</td>
                    <td>@c.Amount</td>
                </tr>
            }
        </tbody>
    </table>
}

@if (!(incomeExpenses is null))
{
    <table class="table" style="">
        <thead>
            <tr>
                <th><b>Year </b></th>
                <th><b>Month</b></th>
                <th><b>Income</b></th>
                <th><b>Essential Expenditure</b></th>
                <th><b>Discretionary Expenditure</b></th>
                <th><b>Reduced Discretionary Expenditure</b></th>

            </tr>
        </thead>
        <tbody>
            @foreach ((int, int, decimal, decimal, decimal) ie in incomeExpenses)
            {
                var discount = ie.Item5 * (Convert.ToDecimal(discReduction) / 100.0M);
                <tr>
                    <td>@ie.Item1</td>
                    <td>@ie.Item2</td>
                    <td>@ie.Item3</td>
                    <td>@ie.Item4</td>
                    <td>@ie.Item5</td>
                    <td>£@discount</td>

                </tr>
            }
        </tbody>
    </table>
}



@code
{
        [Parameter]
        public string id { get; set; }

    private ClaimsPrincipal user;
    private Pluto.User mongoDbUser;

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    private List<Goal> goals;
    private List<Income> incomes;
    private List<Expense> expenses;
    private List<(int, int, decimal, decimal, decimal)> incomeExpenses;

    private Goal goal;

    private int months = 520;
    private PlutoFunctions plutoFunctions;
    private List<(int, decimal, decimal)> intervals;

    private List<Contribution> goalPotential;
    private List<Contribution> goalCurrent;
    private List<Contribution> goalCurrentAccrual;
    private List<Contribution> goalPotentialAccrual;
    private List<Contribution> goalTarget;

    private int discReduction = 50;
    private decimal limitUpper = 0;

    private int goalPotentialLength = 0;
    private string goalPotentialAnimation;
    private int goalCurrentLength = 0;
    private string goalCurrentAnimation;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;
        user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            string userId = AppUser.GetClaimValue("sub", user.Claims);        //user.Claims//user.FindFirst(ClaimTypes.NameIdentifier)//user.Claims.First(c=>c.Type=="Subject").Value;
            mongoDbUser = await GetMongoDbUser(userId, user);
        }

        incomes = await Http.GetFromJsonAsync<List<Income>>($"api/income/user/{mongoDbUser.Id}");
        expenses = await Http.GetFromJsonAsync<List<Expense>>($"api/expense/user/{mongoDbUser.Id}");


        if (string.IsNullOrEmpty(id))
        {
            goal = new Goal { GoalName = "New goal", StartAmount = 0, Allocation = 100, TargetAmount = 0, GoalCategory = GoalCategories.General, UserId = mongoDbUser.Id };
            //var response = await Http.PostAsJsonAsync<Goal>("api/goal", goal, null);
            //goals = await Http.GetFromJsonAsync<List<Goal>>($"api/goal/user/{user.Id}");
        }
        else
        {
            goal = await Http.GetFromJsonAsync<Goal>($"api/goal/{id}");
            goalTarget = new List<Contribution> { new Contribution { MonthYear = new DateTime(2021, 5, 1), Amount = goal.TargetAmount }, new Contribution { MonthYear = new DateTime(2025, 5, 1), Amount = goal.TargetAmount } };
        }

        plutoFunctions = new PlutoFunctions();

        //months = plutoFunctions.MonthsToGoal(goal, incomes, expenses, goal.Allocation);
        //intervals = plutoFunctions.Intervals(goal, incomes, expenses, goal.Allocation);

        UpdateCollections();
    }

    private void UpdateCollections()
    {
        incomeExpenses = plutoFunctions.IncomeExpenseProjection(months, incomes, expenses);
        goalPotential = plutoFunctions.goalContributions(goal, incomeExpenses, true, 100 - discReduction);
        goalCurrent = plutoFunctions.goalContributions(goal, incomeExpenses);

        goalCurrentAnimation = $"#container_Series_0_Point_{goalCurrent.Count - 1}_Symbol";
        goalPotentialAnimation = $"#container_Series_1_Point_{goalPotential.Count - 1}_Symbol";

        limitUpper = plutoFunctions.getLimit(goalPotential);
    }

    private void AllocationChanged()
    {

        UpdateCollections();
    }

    private void DiscReductionChanged()
    {
        UpdateCollections();
    }


    ////redundant
    //public class ChartData
    //{
    //    public int X { get; set; }
    //    public decimal Y { get; set; }
    //    public decimal Z { get; set; }
    //    public decimal A { get; set; }
    //}

    public class IntervalAmount
    {
        public int Interval { get; set; }
        public decimal Amount { get; set; }
    }

    //public class LineChartData
    //{
    //    public DateTime Period { get; set; }
    //    public double Banana_ProductionRate { get; set; }
    //    public double Apple_ProductionRate { get; set; }
    //}

    //    public List<LineChartData> ChartData = new List<LineChartData>
    //{
    //        new LineChartData { Period = new DateTime(2005, 01, 01), Banana_ProductionRate = 12, Apple_ProductionRate = 9.5 },
    //        new LineChartData { Period = new DateTime(2006, 01, 01), Banana_ProductionRate = 10.6, Apple_ProductionRate = 19.9 },
    //        new LineChartData { Period = new DateTime(2007, 01, 01), Banana_ProductionRate = 15.6, Apple_ProductionRate = 25.2 },
    //        new LineChartData { Period = new DateTime(2008, 01, 01), Banana_ProductionRate = 38.6, Apple_ProductionRate = 36 },
    //        new LineChartData { Period = new DateTime(2009, 01, 01), Banana_ProductionRate = 27.4, Apple_ProductionRate = 16.6 },
    //        new LineChartData { Period = new DateTime(2010, 01, 01), Banana_ProductionRate = 23.5, Apple_ProductionRate = 14.2 },
    //        new LineChartData { Period = new DateTime(2011, 01, 01), Banana_ProductionRate = 16.6, Apple_ProductionRate = 10.3 }
    //    };


    protected async Task Save2021()
    {
        goal.UserId = mongoDbUser.Id;
        var result = await Http.PostAsJsonAsync("api/goal", goal, null);
    }

    protected async Task Cancel()
    {
        NavManager.NavigateTo("goals");
    }

    protected async Task Delete(Goal goal)
    {
        Console.WriteLine($"Deleting id:{goal.Id}");
        var result = await Http.DeleteAsync($"api/goal/{goal.Id}");

        NavManager.NavigateTo("goals");
    }

    // Auth overhead
    private async Task<Pluto.User> GetMongoDbUser(string SubjectId, ClaimsPrincipal user)
    {
        Pluto.User mongoDbUser = null;
        try
        {
            mongoDbUser = await Http.GetFromJsonAsync<Pluto.User>($"api/users/guid/{SubjectId}");
        }
        catch
        {
        }

        if (mongoDbUser is null)
        {
            mongoDbUser = new Pluto.User { SubjectId = SubjectId, CreatedOn = DateTime.Now, Email = "", Name = user.Identity.Name };
            await Save(mongoDbUser);
            return await GetMongoDbUser(SubjectId, user);
        }
        return mongoDbUser;
    }

    private async Task Save(Pluto.User user)
    {
        await Http.PostAsJsonAsync("api/users", user);
    }
}