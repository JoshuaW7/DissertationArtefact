@page "/expense-form/{id}"
@using DissertationArtefact.Shared
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Security.Claims;
@using Pluto = DissertationArtefact.Shared
@inject HttpClient Http
@inject NavigationManager NavManager
@attribute [Authorize]


@if (expense == null)
{
    <p><em>...</em></p>
}
else
{

    <h1>
        Expense Form
        <button class="btn btn-danger"
                @onclick="@((async () => await Delete(expense)))">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">
                <path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0z" />
            </svg>
        </button>
    </h1>

    <form>
        <div class="form-group">
            <label for="" class="form-label">Expense Name: </label>
            <input @bind="@expense.LabelName" class="form-control" />
        </div>

        <div class="form-group">
            <label for="" class="form-label">Payment Date:</label>
            <input @bind="@expense.PaymentDate" @bind:format="yyyy-MM-dd" class="form-control" />
        </div>

        <div class="form-group">
            <label for="" class="form-label">Frequency: </label>
            <select @bind="expense.Frequency" class="form-control">
                <option value="@ExpenseFrequencies.Annually">@nameof(ExpenseFrequencies.Annually)</option>
                <option value="@ExpenseFrequencies.Monthly">@nameof(ExpenseFrequencies.Monthly)</option>
                <option value="@ExpenseFrequencies.Weekly">@nameof(ExpenseFrequencies.Weekly)</option>
                <option value="@ExpenseFrequencies.Daily">@nameof(ExpenseFrequencies.Daily)</option>
                <option value="@ExpenseFrequencies.OneTime">@nameof(ExpenseFrequencies.OneTime)</option>
            </select>
        </div>

        <div class="form-group">
            <label for="" class="form-label">Type: </label>
            <select @bind="expense.Type" class="form-control">
                <option value="@Types.Discretionary">@nameof(Types.Discretionary)</option>
                <option value="@Types.Essential">@nameof(Types.Essential)</option>
            </select>
        </div>

        <div class="form-group">
            <label for="" class="form-label">Category: </label>
            <select @bind="expense.Category" class="form-control">
                @foreach (Categories category in (Categories[])Enum.GetValues(typeof(Categories)))
                {

                    <option value="@category">@category</option>

                }
            </select>
        </div>

        <div class="form-group">
            <label for="" class="form-label">Amount: </label>
            <input @bind="@expense.Amount" class="form-control" />
        </div>
    </form>


    <!--Bootstrap button, look into syncfusion-->
    <button class="btn btn-primary" @onclick="@(async () => await Cancel())">Back</button>
    <button class="btn btn-success" @onclick="@(async () => await Save())">Save</button>

}



@code {

    [Parameter]
    public string id { get; set; }

    private Expense expense;
    private List<Expense> expenses;

    private ClaimsPrincipal user;
    private Pluto.User mongoDbUser;

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;
        user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            string userId = AppUser.GetClaimValue("sub", user.Claims);        //user.Claims//user.FindFirst(ClaimTypes.NameIdentifier)//user.Claims.First(c=>c.Type=="Subject").Value;
            mongoDbUser = await GetMongoDbUser(userId, user);
        }

        expenses = await Http.GetFromJsonAsync<List<Expense>>($"api/expense/user/{mongoDbUser.Id}");

        if (id == new Guid().ToString()) //(string.IsNullOrEmpty(id)) ...not sure what this is for.. might be tired eyes
        {
            expense = new Expense
            {
                Frequency = ExpenseFrequencies.OneTime,
                PaymentDate = DateTime.Now,
                UserId = mongoDbUser.Id
            };
        }
        else
        {
            expense = await Http.GetFromJsonAsync<Expense>($"api/expense/{id}");

            if (expense is null)
            {
                //expense = new Expense();
            }
        }
    }

    protected async Task Save()
    {
        expense.UserId = mongoDbUser.Id;
        var result = await Http.PostAsJsonAsync("api/expense", expense, null);

        NavManager.NavigateTo("expensesDB");
    }

    protected async Task Cancel()
    {
        NavManager.NavigateTo("expensesDB");
    }

    protected async Task Delete(Expense expense)
    {
        Console.WriteLine($"Deleting id:{expense.Id}");
        var result = await Http.DeleteAsync($"api/expense/{expense.Id}");

        //expenses.Remove(expense);
        NavManager.NavigateTo("expensesDB");
    }

    // Auth overhead
    private async Task<Pluto.User> GetMongoDbUser(string SubjectId, ClaimsPrincipal user)
    {
        Pluto.User mongoDbUser = null;
        try
        {
            mongoDbUser = await Http.GetFromJsonAsync<Pluto.User>($"api/users/guid/{SubjectId}");
        }
        catch
        {
        }

        if (mongoDbUser is null)
        {
            mongoDbUser = new Pluto.User { SubjectId = SubjectId, CreatedOn = DateTime.Now, Email = "", Name = user.Identity.Name };
            await Save(mongoDbUser);
            return await GetMongoDbUser(SubjectId, user);
        }
        return mongoDbUser;
    }

    private async Task Save(Pluto.User user)
    {
        await Http.PostAsJsonAsync("api/users", user);
    }
}

