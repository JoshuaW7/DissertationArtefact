@page "/expense-form/{id}"
@using DissertationArtefact.Shared
@inject HttpClient Http
@inject NavigationManager NavManager



@if (expense == null)
{
    <p><em>Loading expense</em></p>
}
else
{

    <h1>Expense Form                         
        <button class="btn btn-danger"
            @onclick="@((async () => await Delete(expense)))">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-lg" viewBox="0 0 16 16">
                <path d="M1.293 1.293a1 1 0 0 1 1.414 0L8 6.586l5.293-5.293a1 1 0 1 1 1.414 1.414L9.414 8l5.293 5.293a1 1 0 0 1-1.414 1.414L8 9.414l-5.293 5.293a1 1 0 0 1-1.414-1.414L6.586 8 1.293 2.707a1 1 0 0 1 0-1.414z" />
            </svg>
        </button>
    </h1>

    <div>
        <label for="">Expense Name: </label>
        <input @bind="@expense.LabelName" />
    </div>

    <div>
        <label for="">Payment Date:</label>
        <input @bind="@expense.PaymentDate" @bind:format="yyyy-MM-dd" />
    </div>

    <div>
        <label for="">Frequency: </label>
        <select @bind="expense.Frequency">
            <option value="@ExpenseFrequencies.Annually">@nameof(ExpenseFrequencies.Annually)</option>
            <option value="@ExpenseFrequencies.Monthly">@nameof(ExpenseFrequencies.Monthly)</option>
            <option value="@ExpenseFrequencies.Weekly">@nameof(ExpenseFrequencies.Weekly)</option>
            <option value="@ExpenseFrequencies.OneTime">@nameof(ExpenseFrequencies.OneTime)</option>
        </select>
    </div>

    <div>
        <label for="">Type: </label>
        <select @bind="expense.Type">
            <option value="@Types.Discretionary">@nameof(Types.Discretionary)</option>
            <option value="@Types.Essential">@nameof(Types.Essential)</option>
        </select>
    </div>

    <div>
        <label for="">Category: </label>

        <select @bind="expense.Category">
            @foreach (Categories category in (Categories[])Enum.GetValues(typeof(Categories)))
            {

                <option value="@category">@category</option>

            }
        </select>
    </div>

    <div>
        <label for="">Amount: </label>
        <input @bind="@expense.Amount" />
    </div>



    <!--Bootstrap button, look into syncfusion-->
    <button class="btn btn-primary" @onclick="@(async () => await Cancel())">Back</button>
    <button class="btn btn-success" @onclick="@(async () => await Save())">Save</button>

}



@code {

    [Parameter]
    public string id { get; set; }

    private Expense expense;
    private User user;
    private List<Expense> expenses;

    protected override async Task OnInitializedAsync()
    {
        string abc = "6091a3f06dbeb16f2aa3abd4";
        user = await Http.GetFromJsonAsync<User>($"api/users/{abc}");
        expenses = await Http.GetFromJsonAsync<List<Expense>>($"api/expense/user/{user.Id}");

        if (id == new Guid().ToString()) //(string.IsNullOrEmpty(id)) ...not sure what this is for.. might be tired eyes
        {
            expense = new Expense
            {
                Frequency = ExpenseFrequencies.OneTime,
                PaymentDate = DateTime.Now,
                UserId = user.Id
            };
        }
        else
        {
            expense = await Http.GetFromJsonAsync<Expense>($"api/expense/{id}");

            if (expense is null)
            {
                //expense = new Expense();
            }
        }
    }

    protected async Task Save()
    {
        expense.UserId = user.Id;
        var result = await Http.PostAsJsonAsync("api/expense", expense, null);

        NavManager.NavigateTo("expensesDB");
    }

    protected async Task Cancel()
    {
        NavManager.NavigateTo("expensesDB");
    }

    protected async Task Delete(Expense expense)
    {
        Console.WriteLine($"Deleting id:{expense.Id}");
        var result = await Http.DeleteAsync($"api/expense/{expense.Id}");

        expenses.Remove(expense);
    }
}

